// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/map_service.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// PointRequest
type PointRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PointRequest) Reset()         { *m = PointRequest{} }
func (m *PointRequest) String() string { return proto.CompactTextString(m) }
func (*PointRequest) ProtoMessage()    {}
func (*PointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_map_service_b0e516bc097757bc, []int{0}
}
func (m *PointRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PointRequest.Unmarshal(m, b)
}
func (m *PointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PointRequest.Marshal(b, m, deterministic)
}
func (dst *PointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PointRequest.Merge(dst, src)
}
func (m *PointRequest) XXX_Size() int {
	return xxx_messageInfo_PointRequest.Size(m)
}
func (m *PointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PointRequest proto.InternalMessageInfo

// Points are represented as latitude-longitude pairs and counts
type Point struct {
	Latitude             string   `protobuf:"bytes,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            string   `protobuf:"bytes,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Count                int64    `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_map_service_b0e516bc097757bc, []int{1}
}
func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (dst *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(dst, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetLatitude() string {
	if m != nil {
		return m.Latitude
	}
	return ""
}

func (m *Point) GetLongitude() string {
	if m != nil {
		return m.Longitude
	}
	return ""
}

func (m *Point) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Points struct {
	Points               []*Point `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Points) Reset()         { *m = Points{} }
func (m *Points) String() string { return proto.CompactTextString(m) }
func (*Points) ProtoMessage()    {}
func (*Points) Descriptor() ([]byte, []int) {
	return fileDescriptor_map_service_b0e516bc097757bc, []int{2}
}
func (m *Points) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Points.Unmarshal(m, b)
}
func (m *Points) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Points.Marshal(b, m, deterministic)
}
func (dst *Points) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Points.Merge(dst, src)
}
func (m *Points) XXX_Size() int {
	return xxx_messageInfo_Points.Size(m)
}
func (m *Points) XXX_DiscardUnknown() {
	xxx_messageInfo_Points.DiscardUnknown(m)
}

var xxx_messageInfo_Points proto.InternalMessageInfo

func (m *Points) GetPoints() []*Point {
	if m != nil {
		return m.Points
	}
	return nil
}

func init() {
	proto.RegisterType((*PointRequest)(nil), "proto.PointRequest")
	proto.RegisterType((*Point)(nil), "proto.Point")
	proto.RegisterType((*Points)(nil), "proto.Points")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MapServiceClient is the client API for MapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MapServiceClient interface {
	// A server-to-client streaming RPC.
	//
	// Streams all IPv6 data points
	List(ctx context.Context, in *PointRequest, opts ...grpc.CallOption) (MapService_ListClient, error)
	Get(ctx context.Context, in *PointRequest, opts ...grpc.CallOption) (*Points, error)
}

type mapServiceClient struct {
	cc *grpc.ClientConn
}

func NewMapServiceClient(cc *grpc.ClientConn) MapServiceClient {
	return &mapServiceClient{cc}
}

func (c *mapServiceClient) List(ctx context.Context, in *PointRequest, opts ...grpc.CallOption) (MapService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MapService_serviceDesc.Streams[0], "/proto.MapService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &mapServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MapService_ListClient interface {
	Recv() (*Point, error)
	grpc.ClientStream
}

type mapServiceListClient struct {
	grpc.ClientStream
}

func (x *mapServiceListClient) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mapServiceClient) Get(ctx context.Context, in *PointRequest, opts ...grpc.CallOption) (*Points, error) {
	out := new(Points)
	err := c.cc.Invoke(ctx, "/proto.MapService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapServiceServer is the server API for MapService service.
type MapServiceServer interface {
	// A server-to-client streaming RPC.
	//
	// Streams all IPv6 data points
	List(*PointRequest, MapService_ListServer) error
	Get(context.Context, *PointRequest) (*Points, error)
}

func RegisterMapServiceServer(s *grpc.Server, srv MapServiceServer) {
	s.RegisterService(&_MapService_serviceDesc, srv)
}

func _MapService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PointRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MapServiceServer).List(m, &mapServiceListServer{stream})
}

type MapService_ListServer interface {
	Send(*Point) error
	grpc.ServerStream
}

type mapServiceListServer struct {
	grpc.ServerStream
}

func (x *mapServiceListServer) Send(m *Point) error {
	return x.ServerStream.SendMsg(m)
}

func _MapService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MapService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServiceServer).Get(ctx, req.(*PointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MapService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MapService",
	HandlerType: (*MapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _MapService_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _MapService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/map_service.proto",
}

func init() {
	proto.RegisterFile("proto/map_service.proto", fileDescriptor_map_service_b0e516bc097757bc)
}

var fileDescriptor_map_service_b0e516bc097757bc = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xcf, 0x4d, 0x2c, 0x88, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x03, 0x8b,
	0x08, 0xb1, 0x82, 0x29, 0x25, 0x3e, 0x2e, 0x9e, 0x80, 0xfc, 0xcc, 0xbc, 0x92, 0xa0, 0xd4, 0xc2,
	0xd2, 0xd4, 0xe2, 0x12, 0xa5, 0x70, 0x2e, 0x56, 0x30, 0x5f, 0x48, 0x8a, 0x8b, 0x23, 0x27, 0xb1,
	0x24, 0xb3, 0xa4, 0x34, 0x25, 0x55, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xce, 0x17, 0x92,
	0xe1, 0xe2, 0xcc, 0xc9, 0xcf, 0x4b, 0x87, 0x48, 0x32, 0x81, 0x25, 0x11, 0x02, 0x42, 0x22, 0x5c,
	0xac, 0xc9, 0xf9, 0xa5, 0x79, 0x25, 0x12, 0xcc, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x10, 0x8e, 0x92,
	0x1e, 0x17, 0x1b, 0xd8, 0xe0, 0x62, 0x21, 0x15, 0x2e, 0xb6, 0x02, 0x30, 0x4b, 0x82, 0x51, 0x81,
	0x59, 0x83, 0xdb, 0x88, 0x07, 0xe2, 0x22, 0x3d, 0x88, 0x3b, 0xa0, 0x72, 0x46, 0x19, 0x5c, 0x5c,
	0xbe, 0x89, 0x05, 0xc1, 0x10, 0x37, 0x0b, 0xe9, 0x72, 0xb1, 0xf8, 0x64, 0x16, 0x97, 0x08, 0x09,
	0xa3, 0xa8, 0x85, 0xb8, 0x59, 0x0a, 0xc5, 0x00, 0x25, 0x06, 0x03, 0x46, 0x21, 0x6d, 0x2e, 0x66,
	0xf7, 0x54, 0x1c, 0xaa, 0x79, 0x91, 0x05, 0x8b, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0x7c, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xae, 0xe6, 0xd6, 0xde, 0x2b, 0x01, 0x00, 0x00,
}
